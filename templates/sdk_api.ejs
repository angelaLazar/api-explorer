<div class="alert-info alert">

  <strong>Heads up!</strong> Before you write a new client for the Auth0 API, check our <a href="https://github.com/auth0/">GitHub</a> to see if we already have something for your preferred language.

</div>

<h3 id="authentication"><a class="anchor" href="#authentication"><i class="icon-budicon-345"> </i></a>Authentication</h3>

<div class="accordion">

<!-- POST /oauth/token -->

  <div class="markdown" data-path="/oauth/token" data-verb="POST" data-description="Obtain a token to call the API">
Auth0 API requires an `access_token`. You can get one by authenticating with your `client_id` and `client_secret` (It will be valid for 24 hours). To obtain the global client ID and global client secret see the "Advanced" section under "Account Settings" in the Auth0 <a href="https://manage.auth0.com/#/account/advanced">dashboard</a>.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>oauth/token
Content-Type: 'application/json'
<form id='accesstoken-form'>{
  "client_id":        "<span class='param client_client_id'></span>",
  "client_secret":    "<span class='param client_client_secret'></span>",
  "grant_type":       "<span class='param'>client_credentials</span>"
}
</form></code></pre>

Once authenticated, the `access_token` can be included in the request as part of the querystring (`?access_token=...`) or in an HTTP header (`Authorization: Bearer ...access_token...`).

<span class='label label-info'>Heads up!</span> access token last for 24hs, you better ask for a token everytime you make a request to the API or handle vigorously ```401``` responses.
  </div>

</div>

<h3 id="users"><a class="anchor" href="#users"><i class="icon-budicon-345"> </i></a>Users</h3>

<div class="accordion">

  <!-- GET /api/users -->
  <div class="markdown" data-verb="GET" data-path="/api/users" data-description="Gets all users who have logged in">Gets all users who have logged in through any of your connections.
<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/users
Authorization: Bearer <span class="tokenme param">{token}</span></code></pre>

  </div>

  <!-- GET /api/users?search={criteria} -->
  <div class="markdown" data-verb="GET" data-path="/api/users?search={criteria}" data-description="Search users">Performs a 'starts with' search by name or email. Or search by field, for example: email\_verified:true; loginsCount:1; family\_name:"johnson"
<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/users?search=<input type="text" id="allusers-search_search" />

Authorization: Bearer <span class="tokenme param">{token}</span></code></pre>

  </div>

  <!-- GET /api/users/{user_id} -->
  <div class="markdown" data-verb="GET" data-path="/api/users/{user_id}" data-description="Gets an user by id">
Gets an user who have logged in through any of your connections that has a given id.
<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/users/<select id="user-by-id-users-selector" class="user-selector"></select>
Authorization: Bearer <span class="tokenme param">{token}</span></code></pre>

  </div>

  <!-- GET /api/users/{user_id}/devices -->
  <div class="markdown" data-verb="GET" data-path="/api/users/{user_id}/devices" data-description="Gets all user's devices">
Gets all devices/refresh_tokens being used by the user.
<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/users/<select id="userdevices-by-id-users-selector" class="user-selector"></select>/devices
Authorization: Bearer <span class="tokenme param">{token}</span></code></pre>

  </div>

  <!-- GET /api/connections/{connection}/users -->
  <div class="markdown" data-verb="GET" data-path="/api/connections/{connection}/users" data-description="Gets all users from an enterprise directory">
<span class="label label-info">Head ups!</span> If the connection does not support querying for users (for instance ADFS, SAMLP), it will return the users who have logged in through that connection.

<pre><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/connections/<select id='connection-users-selector' class='connection-selector'></select>/users?
  &amp;per_page=  <input type="text" id="connection-users_per-page" value="500" />

Authorization: Bearer <span class="tokenme param">{token}</span></pre>

  </div>
  <!-- GET /api/connections/{connection}/users?search={criteria} -->
  <div class="markdown" data-verb="GET" data-path="/api/connections/{connection}/users?search={criteria}" data-description="Search users from an enterprise directories">
<% include ./templates/enterprise-conn-user-search-doc %>

<pre><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/connections/<select id='connection-users-search-selector' class='connection-selector'></select>/users?
  search=     <input type="text" id="connection-users-search_search" />
  &amp;per_page=  <input type="text" id="connection-users-search_per-page" value="500" />

Authorization: Bearer <span class="tokenme param">{token}</span></pre>

  </div>

  <!-- GET /api/enterpriseconnections/users?search={criteria} -->
  <div class="markdown" data-verb="GET" data-path="/api/enterpriseconnections/users?search={criteria}" data-description="Search users from all enterprise directories">
Search users from all enterprise directories based on the specified <code>criteria</code>. The parameter is mandatory.

<% include ./templates/enterprise-conn-user-search-doc %>

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/enterpriseconnections/users?search=<textarea id="enterprise-users-search-query" style="width:250px;height:20px;"></textarea>&amp;per_page=<input type="text" id="enterpriseconn-users-per-page" value="500" />
Authorization: Bearer <span class="tokenme param">{token}</span></code></pre>

  </div>

  <!-- GET /api/socialconnections/users?search={criteria} -->
  <div class="markdown" data-verb="GET" data-path="/api/socialconnections/users?search={criteria}" data-description="Gets all users who have logged in with social connections that match the search criteria">
Gets all users who have logged in through social connections that match the specified search <code>criteria</code>.

Performs a 'starts with' search by name or email. Or searches by field, for example: email\_verified:true; loginsCount:1; family\_name:"johnson"

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/socialconnections/users?search=<textarea id="socialconn-users-search-query" style="width:250px;height:20px;"></textarea>&amp;per_page=<input type="text" id="socialconn-users_per-page" value="500" />
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>

  </div>

<!-- GET /api/clients/{client-id}/users -->
<div class="markdown" data-verb="GET" data-path="/api/clients/{client-id}/users" data-description="Gets all users from a specific client">

Gets all users who have logged in with a specific client

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/clients/<span class="client_client_id"></span>/users
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>

</div>

<!-- POST /api/users -->

<div class="markdown" data-verb="POST" data-path="/api/users" data-description="Creates a user">
  Creates a user. The body of the request must include the <code>email</code>, the <code>password</code>, and the <code>connection</code> of the user. Also it can include the user's <code>email_verified</code> parameter and the <code>extra attributes</code> that you want to add.

  <pre>
  <code><span class='http-verb'>POST</span> <span class="client_namespace"></span>api/users/
  Authorization: Bearer <span class="tokenme param">{token}</span>
  Content-Type: 'application/json'
  <form id='user-form'>
  {
    "email":          "<input type="email" placeholder="email" id="api-create-user-email">",
    "password":       "<input type="password" placeholder="password" id="api-create-user-password">",
    "connection":     "<select style="min-width:221px" id="api-create-user-connection-selector">
    </select>", // only database or passwordless connections
    "email\_verified": <select style="margin-top:8px;" id='api-create-user-email-verified-selector'><option value="false">false</option><option value="true">true</option></select>, // if true, it won't send an email for confirmation
    <textarea id="sdk-create-jsoneditor" rows="3" style="margin-top:7px;width:75%;">"vip": true,&#13;&#10;"birthdate": "1980-12-23T03:00:00.000Z"</textarea>
  }
  </form>
  </code>
  </pre>
</div>

<!-- POST api/users/{user_id}/send_verification_email -->

<div class="markdown" data-verb="POST" data-path="/api/users/{user_id}/send_verification_email" data-description="Resends verification account email">
  Resends verification account email.

  <pre>
  <code><span class='http-verb'>POST</span> <span class="client_namespace"></span>api/users/<select id='user-id-selector-for-sendverificationemail' class='user-selector'></select>/`send_verification_email`
  Authorization: Bearer <span class="tokenme param">{token}</span></code></pre>
</div>

<!-- POST api/users/{user_id}/change_password_ticket -->

<div class="markdown" data-verb="POST" data-path="/api/users/{user_id}/change_password_ticket" data-description="Generates change password ticket">
  Generates change password ticket. The body of the request must include the <code>newPassword</code> of the user. Optionally, you can include the <code>resultUrl</code> (post verification url).

  <pre>
  <code><span class='http-verb'>POST</span> <span class="client_namespace"></span>api/users/<select id='user-id-selector-for-changepasswordticket' class='user-selector'></select>/`change_password_ticket`
  Authorization: Bearer <span class="tokenme param">{token}</span>
  Content-Type: 'application/json'
  <form id='user-changepasswordticket-form'>
  {
    "newPassword":    "<input type="password" placeholder="new password" id="api-user-changepasswordticket-newPassword">",
    "resultUrl":      "<input type="text" placeholder="post verification url" id="api-user-changepasswordticket-resultUrl">" // optional
  }
  </form></code></pre>
</div>

<!-- POST api/users/{user_id}/verification_ticket -->

<div class="markdown" data-verb="POST" data-path="/api/users/{user_id}/verification_ticket" data-description="Generates verification account ticket">
  Generates verification account ticket. Optionally, you can include the <code>resultUrl</code> (post verification url) in the body of the request.

  <pre>
  <code><span class='http-verb'>POST</span> <span class="client_namespace"></span>api/users/<select id='user-id-selector-for-verificationticket' class='user-selector'></select>/`verification_ticket`
  Authorization: Bearer <span class="tokenme param">{token}</span>
  Content-Type: 'application/json'
  <form id='user-verificationticket-form'>
  {
    "resultUrl":      "<input type="text" placeholder="post verification url" id="api-user-verificationticket-resultUrl">" // optional
  }
  </form></code></pre>
</div>

<!-- POST api/users/{user_id}/publickey -->

<div class="markdown" data-verb="POST" data-path="/api/users/{user_id}/publickey" data-description="Saves user public key for specified device">
  Saves user public key for specified device.

<pre>
<code><span class='http-verb'>POST</span> <span class="client_namespace"></span>api/users/<select id='user-id-selector-for-new_publickey' class='user-selector'></select>/publickey
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
<form id='user-new_publickey-form'>{
  "device":     "<input type="text" id="api-user-new_publickey-device">",
  "public_key": "<textarea id="api-user-new_publickey-public_key" placeholder="base64 encoded public key" rows="3" style="width:75%;"></textarea>"
}</form></code></pre>
</div>

<!-- PUT /api/users/{user_id}/email -->
<div class="markdown" data-verb="PUT" data-path="/api/users/{user_id}/email" data-description="Updates user email">
Update user email. The body of the request must include the new <code>email</code>.

<pre><code><span class='http-verb'>PUT</span> <span class="client_namespace"></span>api/users/<select id='update-user-id-selector-for-changeemail' class='user-selector'></select>/email
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
<form id='user-form' style="margin-bottom:-40px">
{
  "email":   "<input type="email" placeholder="email" id="api-update-user-email">",
  "verify":  <select style="margin-top:8px;" id='api-update-user-email-verify-selector'><option value="true">true</option><option value="false">false</option></select> // if false, it won't send an email for verification
}
</form>
</code></pre>
</div>

<!-- PUT /api/users/{user_id}/metadata -->
<div class="markdown" data-verb="PUT" data-path="/api/users/{user_id}/metadata" data-description="Updates user metadata">
Update user metadata. The body of the request must include a <code>json</code> object with metadata <code>attributes</code>.

<pre>
<code><span class='http-verb'>PUT</span> <span class="client_namespace"></span>api/users/<select id='user-id-selector' class='user-selector'></select>/metadata
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
{
  <textarea id="sdk-jsoneditor-user-metadata" rows="3" style="margin-top:7px;width:75%;">
  "Policy": "1238907654",
  "Customer Id": "1234"
</textarea>
}
</code>
</pre>
</div>

<!-- PUT /api/users/{user_id}/password -->
<div class="markdown" data-verb="PUT" data-path="/api/users/{user_id}/password" data-description="Updates user password">
Update user password. The body of the request must include the new <code>password</code>.

<pre><code><span class='http-verb'>PUT</span> <span class="client_namespace"></span>api/users/<select id='update-user-id-selector' class='user-selector'></select>/password
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
<form id='user-form' style="margin-bottom:-40px">
{
  "password":   "<input type="password" placeholder="password" id="api-update-user-password">",
  "verify":     <select style="margin-top:8px;" id='api-update-user-password-verify-selector'><option value="true">true</option><option value="false">false</option></select>, // if false, it won't send an email for confirmation
}
</form>
</code></pre>
</div>

<!-- PUT /api/users/{email}/password -->
<div class="markdown" data-verb="PUT" data-path="/api/users/{email}/password" data-description="Updates user password">
Update user password. The body of the request must include the <code>email</code>, <code>connection</code> and the new <code>password</code>.

<pre><code><span class='http-verb'>PUT</span> <span class="client_namespace"></span>api/users/<select id='update-user-password-byemail-email-selector' class='user-email-selector'></select>/password
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
<form id='user-form' style="margin-bottom:-40px">
{
  "email":      "<input type="email" placeholder="email" id="api-update-user-password-byemail-email" disabled>",
  "password":   "<input type="password" placeholder="password" id="api-update-user-password-byemail-newpassword">",
  "connection": "<select style="min-width:221px" id="api-update-user-password-byemail-connection-selector">
    </select>", // only database connections
  "verify":     <select style="margin-top:8px;" id='api-update-user-password-byemail-verify-selector'><option value="true">true</option><option value="false">false</option></select>, // if false, it won't send an email for confirmation
}
</form>
</code></pre>
</div>

<!-- PATCH /api/users/{user_id}/metadata -->
<div class="markdown" data-verb="PATCH" data-path="/api/users/{user_id}/metadata" data-description="Patch user metadata">
  Patch user metadata. The body of the request must include a <code>json</code> object with metadata <code>attributes</code>.
  It will not override metadata not specified attributes.

<pre>
<code><span class='http-verb'>PATCH</span> <span class="client_namespace"></span>api/users/<select id='user-patch-selector' class='user-selector'></select>/metadata
  Authorization: Bearer <span class="tokenme param">{token}</span>
  Content-Type: 'application/json'
{
  <textarea id="sdk-patch-jsoneditor" rows="3" style="margin-top:7px;width:75%;">
  "Policy": "1238907654",
  "Customer Id": "1234"
</textarea>
}
</code>
</pre>
</div>

<!-- DELETE /api/users -->
  <div class="markdown" data-verb="DELETE" data-path="/api/users" data-description="Deletes all users">
Deletes all users (including users from non-custom Database connections).

<pre><code><span class='http-verb'>DELETE</span> <span class="client_namespace"></span>api/users
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>
  </div>

<!-- DELETE /api/users/{user_id} -->
  <div class="markdown" data-verb="DELETE" data-path="/api/users/{user_id}" data-description="Deletes a user">
Deletes a user identified by <code>user_id</code>

<pre><code><span class='http-verb'>DELETE</span> <span class="client_namespace"></span>api/users/<select id='user-id-selector-for-delete' class='user-selector'></select>
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>
  </div>

<!-- DELETE /api/users/{user_id}/refresh_tokens/{refresh_token} -->
  <div class="markdown" data-verb="DELETE" data-path="/api/users/{user_id}/refresh_tokens/{refresh_token}" data-description="Revokes a refresh token">
Revokes a user's refresh token

<pre><code><span class='http-verb'>DELETE</span> <span class="client_namespace"></span>api/users/<select id='user-id-selector-for-delete-refresh-token' class='user-selector'></select>/refresh_tokens/<input id='refreshtokendelete-token'>
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>
  </div>

<!-- DELETE /api/users/{user_id}/publickey?device={device} -->
  <div class="markdown" data-verb="DELETE" data-path="/api/users/{user_id}/publickey?device={device}" data-description="Revokes a public key">
Revokes a user's public key for specified device

<pre><code><span class='http-verb'>DELETE</span> <span class="client_namespace"></span>api/users/<select id='user-id-selector-for-delete-public_key' class='user-selector'></select>/publickey?device=<input id='publickeydelete-device'>
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>

  </div>

</div>

<h3 id="connections"><a class="anchor" href="#connections"><i class="icon-budicon-345"> </i></a>Connections</h3>
<div class="accordion">

  <!-- GET /api/connections -->
  <div class="markdown" data-verb="GET" data-path="/api/connections" data-description="Gets all connections">

Gets a list of all the connections (enterprise and social) and all its <code>options</code>

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/connections
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>

  </div>

  <!-- GET /api/connections/:name -->
  <div class="markdown" data-verb="GET" data-path="/api/connections/{connection-name}" data-description="Gets one connection by name">

Gets a connection by name (enterprise and social) and all its <code>options</code>

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/connections/<select id='connection-get-selector' class='connection-selector'></select>
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>

  </div>

  <div class="markdown" data-verb="DELETE" data-path="/api/connections/{connection-name}" data-description="Removes a connection">
Deletes a connection identified by <code>connectionName</code>

<pre><code><span class='http-verb'>DELETE</span> <span class="client_namespace"></span>api/connections/<select id='connection-delete-selector' class='connection-selector'></select>
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>

  </div>

<!-- POST api/connections -->

  <div class="markdown" data-verb="POST" data-path="/api/connections" data-description="Creates a connection">
Creates a connection. The body of the request must include the <code>name</code>, the authentication <code>strategy</code> to use, and an <code>options</code> object with the connection parameters.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>api/connections/
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
  <form id='connection-form'>
  {
    "name":     "<input type="text" class="input-xxlarge" placeholder="connection identifier (e.g.: customerconnection)" id="api-create-connection-name">"
    "strategy": "<select id="api-create-connection-strategy-selector">
    <option value="waad">waad</option>
    <option value="google-apps">google-apps</option>
    <option value="adfs">adfs</option>
    <option value="pingfederate">PingFederate</option>
    <option value="samlp">samlp</option>
    <option value="auth0">auth0</option>
    </select>",
    "options":   {<div class="create-connection-strategy-pane" id="create-connection-options-waad">
      "tenant_domain": <input type="text" data-field='tenant_domain' required name="waad-tenant_domain">
      "domain_aliases": <input type="text" data-field='domain_aliases' name="waad-domain_aliases" placeholder="optional">
    </div><div class="create-connection-strategy-pane" id="create-connection-options-google-apps">
      "tenant_domain": <input type="text" data-field="tenant_domain" required name="tenant_domain">
      "domain_aliases": <input type="text" data-field='domain_aliases' name="domain_aliases" placeholder="optional">
    </div>
    <div class="create-connection-strategy-pane" id="create-connection-options-adfs">
      "tenant_domain": <input type="text" data-field="tenant_domain" name="tenant_domain">,
      "domain_aliases": <input type="text" data-field='domain_aliases' name="adfs-domain_aliases" placeholder="optional">,
      "adfs_server":   <input type="text" data-field="adfs_server" required name="adfs_server">
    </div><div class="create-connection-strategy-pane" id="create-connection-options-pingfederate">
      "domain_aliases": <input type="text" data-field='domain_aliases' name="domain_aliases" placeholder="optional">,
      "PingFederate Base URL": <input type="text" data-field="pingfederate-base-url" required name="pingfederate-base-url">,
      "Signing Cert":   "<textarea id="signingCert" data-field="signingCert" style="width: 650px;height: 150px;" required placeholder="base64 encoded PEM or CER"></textarea>",
    </div><div class="create-connection-strategy-pane" id="create-connection-options-samlp">
      "signInEndpoint":   "<input type="text" data-field="signInEndpoint" required name="signInEndpoint">",
      "signingCert":   "<textarea id="signingCert" data-field="signingCert" style="width: 650px;height: 150px;" required placeholder="base64 encoded PEM or CER"></textarea>",
      "tenant_domain": "<input type="text" data-field="tenant_domain" placeholder="optional" name="tenant_domain">",
      "domain_aliases": <input type="text" data-field='domain_aliases' name="domain_aliases" placeholder="optional">,
      "signOutEndpoint":  "<input type="text" data-field="signOutEndpoint" placeholder="optional" name="signOutEndpoint">",
      </div>
    }
  }
  </form>
</code></pre>
  </div>


  <!-- PUT api/connections -->

  <div class="markdown" data-verb="PUT" data-path="/api/connections/{connection-name}" data-description="Updates a connection">
Updates a connection. The body of the request must include the <code>options</code> object with the connection parameters and the <code>status</code>.

The request's body depends on the strategy that was used to create the connection. Select a strategy:
<select id="api-update-connection-strategy-selector">
  <option value="waad">waad</option>
  <option value="google-apps">google-apps</option>
  <option value="adfs">adfs</option>
  <option value="pingfederate">PingFederate</option>
  <option value="samlp">samlp</option>
  <option value="auth0">auth0</option>
</select>

<pre><code><span class='http-verb'>PUT</span> <span class="client_namespace"></span>api/connections/<select class="connection-selector" id="api-update-connection-name"/>
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
  <form id='update-connection-form'>
  {
    "options":   {<div class="update-connection-strategy-pane" id="update-connection-options-waad">
      "tenant_domain": <input type="text" data-field='tenant_domain' required name="waad-tenant_domain">
    </div><div class="update-connection-strategy-pane" id="update-connection-options-google-apps">
      "tenant_domain": <input type="text" data-field="tenant_domain" required name="tenant_domain">
    </div><div class="update-connection-strategy-pane" id="update-connection-options-adfs">
      "tenant_domain": <input type="text" data-field="tenant_domain" name="tenant_domain">,
      "adfs_server":   <input type="text" data-field="adfs_server" required name="adfs_server">
    </div><div class="update-connection-strategy-pane" id="update-connection-options-pingfederate">
      "PingFederate Base URL": <input type="text" data-field="pingfederate-base-url" required name="pingfederate-base-url">,
      "Signing Cert":   "<textarea id="signingCert" data-field="signingCert" style="width: 650px;height: 150px;" required placeholder="base64 encoded PEM or CER"></textarea>",
    </div><div class="update-connection-strategy-pane" id="update-connection-options-samlp">
      "signInEndpoint":   "<input type="text" data-field="signInEndpoint" required name="signInEndpoint">",
      "signingCert":   "<textarea id="signingCert" data-field="signingCert" style="width: 650px;height: 150px;" required placeholder="base64 encoded PEM or CER"></textarea>",
      "tenant_domain": "<input type="text" data-field="tenant_domain" placeholder="optional" name="tenant_domain">",
      "signOutEndpoint":  "<input type="text" data-field="signOutEndpoint" placeholder="optional" name="signOutEndpoint">",
      </div>
    }
    "status": <select id="update-connection-status-selector">
      <option value="true">true</option>
      <option value="false">false</option>
      </select>
  }
  </form>
</code></pre>
  </div>
</div>

<h3 id="applications"><a class="anchor" href="#applications"><i class="icon-budicon-345"> </i></a>Applications / APIs (Clients)</h3>

<div class="accordion">

  <!-- GET /api/clients -->
  <div class="markdown" data-verb="GET" data-path="/api/clients" data-description="Gets all applications/APIs">
Gets a list of all the applications/APIs (aka clients) and all its <code>options</code>

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/clients
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>
  </div>

  <!-- POST /api/clients -->
  <div class="markdown" data-verb="POST" data-path="/api/clients" data-description="Creates a new applications/APIs">
Create a client. The body of the request can include the <code>name</code> and <code>callbacks</code> parameters.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>api/clients/
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
  <form id='create-client-form'>
  {
    "name":      "<input type="text" id="api-create-client-name" class="client-name" required>",
    "callbacks": "<textarea id="api-create-client-callbacks" class="client-callbacks" required></textarea>" // You can specify multiple valid URLs by comma-separating them.
  }
  </form>
</code></pre>
  </div>

  <!-- PUT /api/clients -->
  <div class="markdown" data-verb="PUT" data-path="/api/clients/{client-id}" data-description="(DEPRECATED) Updates an applications/APIs">
<span class="label label-important">DEPRECATED!</span> This endpoint has been deprecated in favor of PUT.

Update a client. The body of the request can include the <code>name</code> and <code>callbacks</code> parameters. Does not overwrite the entire client, only the provided values.

<pre><code><span class='http-verb'>PUT</span> <span class="client_namespace"></span>api/clients/<span class="client_client_id"></span>/
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
  <form id='update-client-form'>
  {
    "name":      "<input type="text" id="api-update-client-name" class="update-client-name" required>",
    "callbacks": "<textarea id="api-update-client-callbacks" class="update-client-callbacks" required></textarea>" // You can specify multiple valid URLs by comma-separating them.
  }
  </form>
</code></pre>
  </div>

<!-- PATCH /api/clients -->
  <div class="markdown" data-verb="PATCH" data-path="/api/clients/{client-id}" data-description="Updates an applications/APIs">
Update a client. The body of the request must include the <code>name</code> and <code>callbacks</code> parameters. Does not overwrite the entire client, only the provided values.

Additionally the <code>signingKey</code> can be overwritten using this method (not provided for trial for safety reasons). Possible formats are:

<ul>
<li>
<code>
"signingKey": {
  cert: "%CERT_STRING%"
}
// using a cert
</code>
</li>

<li>
<code>
"signingKey": {
  key: "%KEY_STRING%"
}
// using a private key
</code>
</li>

<li>
<code>
"signingKey": {
  pkcs7: "%PKCS7_STRING%"
}
// using a pkcs7
</code>
</li>
</ul>

<span class="label label-important">WARNING!</span> Changing the <code>signingKey</code> for the globalClient will change it for all clients.

<pre><code><span class='http-verb'>PATCH</span> <span class="client_namespace"></span>api/clients/<span class="client_client_id"></span>/
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
  <form id='update-client-form'>
  {
    "name":      "<input type="text" id="api-patch-client-name" class="update-client-name" required>",
    "callbacks": "<textarea id="api-patch-client-callbacks" class="update-client-callbacks" required></textarea>" // You can specify multiple valid URLs by comma-separating them.
  }
  </form>
</code></pre>
  </div>
</div>

<!-- rules -->
<h3 id="rules"><a class="anchor" href="#rules"><i class="icon-budicon-345"> </i></a>Rules</h3>

<div class="accordion">

  <!-- GET /api/rules -->
  <div class="markdown" data-verb="GET" data-path="/api/rules" data-description="Gets all rules">
Gets a list of all the rules

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/rules
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>
  </div>

  <!-- POST /api/rules -->
  <div class="markdown" data-verb="POST" data-path="/api/rules" data-description="Creates a new applications/APIs">
Create a rule. The body of the request must include the <code>name</code>, <code>status</code> and <code>script</code> parameters.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>api/rules/
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
  <form id='create-rule-form'>
  {
    "name":     "<input type="text" id="api-create-rule-name" required>",
    "status":   "<select id="api-create-rule-status">,
    <option value="true">true</option>
    <option value="false">false</option>
    </select>",
    "script":   "<textarea id="api-create-rule-script" style="width: 650px;height: 150px;" required>function (user, context, callback) { user.foo = 'bar'; callback(null, user, context);}</textarea>"
                 // new lines should be encoded as \n
    "order": <input type="text" id="api-create-rule-order" placeholder="optional"/>
  }
  </form>
</code></pre>

  </div>

  <!-- PUT /api/rules -->
  <div class="markdown" data-verb="PUT" data-path="/api/rules/{rule-name}" data-description="Updates a rule">
Update a rule. The body of the request must include the <code>status</code> and <code>script</code> parameters.

<pre><code><span class='http-verb'>PUT</span> <span class="client_namespace"></span>api/rules/<select id='rules-put-selector' class='rule-selector'></select>/
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
  <form id='update-rule-form'>
  {
    "status":   "<select id="api-update-rule-status">,
    <option value="true">true</option>
    <option value="false">false</option>
    </select>",
    "script":   "<textarea id="api-update-rule-script" style="width: 650px;height: 150px;" required>function (user, context, callback) { user.foo = 'bar'; callback(null, user, context);}</textarea>"
    "order": <input type="text" id="api-update-rule-order" placeholder="optional"></input>
                 // new lines should be encoded as \n
  }
  </form>
</code></pre>
  </div>

  <!-- DELETE /api/rules -->

  <div class="markdown" data-verb="DELETE" data-path="/api/rules/{rule-name}" data-description="Deletes a rules">
Deletes a rule identified by <code>rule-name</code> (url-encoded)

<pre><code><span class='http-verb'>DELETE</span> <span class="client_namespace"></span>api/rules/<select id='rule-delete-selector' class='rule-selector'></select>
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>

  </div>

</div>

<h3 id="emails"><a class="anchor" href="#emails"><i class="icon-budicon-345"> </i></a>Email Templates</h3>

<div class="accordion">
  <!-- GET /api/emails/:name -->
  <div class="markdown" data-verb="GET" data-path="/api/emails/{email-template-name}" data-description="Gets an email template by name">

Gets an email template by name

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/emails/<select id='emails-get-selector' class='emails-selector'>
  <option value="verify_email">verify_email</option>
  <option value="welcome_email">welcome_email</option>
  <option value="reset_email">reset_email</option>
  <option value="blocked_account">blocked_account</option>
</select>
Authorization: Bearer <span class="tokenme param">{token}</span>
</code></pre>
  </div>

<!-- POST api/emails -->

  <div class="markdown" data-verb="POST" data-path="/api/emails" data-description="Creates an email template">
Creates an email template. The body of the request must include the <code>template</code> name and the <code>tenant</code>.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>api/emails/
Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
  <form id='create-email-form'>
  {
    "template": "<select id='emails-create-selector' class='emails-selector'>
      <option value="verify_email">verify_email</option>
      <option value="welcome_email">welcome_email</option>
      <option value="reset_email">reset_email</option>
      <option value="blocked_account">blocked_account</option>
    </select>",
    "disabled": <select id="emails-create-disabled-selector">
      <option value="false">false</option>
      <option value="true">true</option>
    </select>,
    "from": "<input id="emails-create-from" type="text" data-field='from' required name="from">",
    "subject": "<input id="emails-create-subject" type="text" data-field='subject' required name="subject">",
    "body": "<textarea id="emails-create-body"  data-field="body" style="width: 650px;height: 150px;" required placeholder="Email body"></textarea>",
    "urlLifetimeInSeconds": <input type="text" id="emails-create-urlLifetimeInSeconds"  data-field="urlLifetimeInSeconds" required name="urlLifetimeInSeconds">,
    "resultUrl": "<input type="text" id="emails-create-resultUrl" data-field='resultUrl' required name="resultUrl">"
    "syntax": "<select id='emails-create-syntax-selector' class='emails-selector'>
      <option value="md_with_macros">md_with_macros</option>
      <option value="liquid">liquid</option>
    </select>"
  }
  </form>
</code></pre>
  </div>


  <!-- PUT api/emails -->

  <div class="markdown" data-verb="PUT" data-path="/api/emails/{email-template-name}" data-description="Updates an email template">
Updates an email template.

<pre><code><span class='http-verb'>PUT</span> <span class="client_namespace"></span>api/emails/<select id='emails-update-selector' class='emails-selector'>
  <option value="verify_email">verify_email</option>
  <option value="welcome_email">welcome_email</option>
  <option value="reset_email">reset_email</option>
  <option value="blocked_account">blocked_account</option>
</select>

Authorization: Bearer <span class="tokenme param">{token}</span>
Content-Type: 'application/json'
  <form id='update-email-form'>
  {
    "disabled": <select id="emails-update-disabled-selector">
      <option value="false">false</option>
      <option value="true">true</option>
    </select>,
    "from": "<input id="emails-update-from" type="text" data-field='from' required name="from">",
    "subject": "<input id="emails-update-subject" type="text" data-field='subject' required name="subject">",
    "body": "<textarea id="emails-update-body"  data-field="body" style="width: 650px;height: 150px;" required placeholder="Email body"></textarea>",
    "urlLifetimeInSeconds": <input type="text" id="emails-update-urlLifetimeInSeconds"  data-field="urlLifetimeInSeconds" required name="urlLifetimeInSeconds">,
    "resultUrl": "<input type="text" id="emails-update-resultUrl" data-field='resultUrl' required name="resultUrl">"
    "syntax": "<select id='emails-update-syntax-selector' class='emails-selector'>
      <option value="md_with_macros">md_with_macros</option>
      <option value="liquid">liquid</option>
    </select>"
  }
  </form>
</code></pre>
  </div>
</div>

<h3 id="logs"><a class="anchor" href="#logs"><i class="icon-budicon-345"> </i></a>Logs</h3>

<div class="accordion">

  <!-- GET /api/logs/:id -->
  <div class="markdown" data-verb="GET" data-path="/api/logs/{_id}" data-description="Gets a log entry">
Retrieves the data related to the log entry identified by <code>_id</code>.

  <pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/logs/<select id="log-get-id-selector" class="logs-selector"></select>
Authorization: Bearer <span class='tokenme param'>{token}</span></code></pre>
</div>

<!-- GET /api/users/:user_id/logs -->
<div class="markdown" data-verb="GET" data-path="/api/users/{user_id}/logs?page={number}&per_page={items}" data-description="Gets the logs for a particular user">
Retrieves the log entries related to the user identified by <code>user_id</code>. Log entries are split into pages of a particular size to avoid returning all data at once:
<ul>
  <li><code>page</code>: The page number. Zero based.</li>
  <li><code>items</code>: The amount of entries per page.</li>
</ul>

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/users/<select id="logs-by-user-id-selector" class="user-selector"></select>/logs?page=<select id='logs-by-user-id-page-selector' class='logs-page-selector'></select>&amp;per_page=<select id='logs-by-user-id-items-selector' class='logs-per-page-selector'></select>
Authorization: Bearer <span class='tokenme param'>{token}</span></code></pre>

  <% include ./templates/logs-doc %>
</div>

  <!-- GET /api/logs -->
  <div class="markdown" data-verb="GET" data-path="/api/logs?page={number}&per_page={items}&sort={field}:{-1|1}&fields={fields}&exclude_fields{true|false}" data-description="Gets log entries">
Retrieves data about log entries based on the specified parameters. Log entries are split into pages of a particular size to avoid returning all data at once:
<ul>

<li><code>page</code>: The page number. Zero based.</li>
<li><code>items</code>: The amount of entries per page.</li>
<li><code>field</code>: The field to use for sorting. <code>1</code> == ascending and <code>-1</code> == descending.</li>
<li><code>fields</code>: Can be used to either include or exclude the specified fields by providing a comma (,) separated list of fields, for example <code>at,c,cn,un</code>. If no list is provided all fields are included in the response.</li>
<li><code>exclude_fields</code>: To exclude the fields <code>exclude_fields=true</code> must be used (if not specified it defaults to false).</li>
</ul>

Possible values for <code>field</code> are:
<ul>
  <li><code>date</code>: The moment when the event occured.</li>
  <li><code>connection</code>: The connection related to the event.</li>
  <li><code>client_name</code>: The name of the client related to the event.</li>
  <li><code>user_name</code>: The user name releated to the event.</li>
</ul>

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/logs?page=<select id='logs-get-page-selector' class='logs-page-selector'></select>&amp;per_page=<select id='logs-get-items-selector' class='logs-per-page-selector'></select>&amp;sort=<select id='logs-get-field-selector'></select>:<select id='logs-get-sort-direction-selector'></select>&amp;fields=<textarea id="logs-get-fields" style="width:150px;height:20px;">date,connection,client_name,user_name</textarea>&amp;exclude_fields=<select id='logs-get-exclude-fields-selector'></select>
Authorization: Bearer <span class='tokenme param'>{token}</span>
</code></pre>

  <% include ./templates/logs-doc %>

  </div>

  <div class="markdown" data-verb="GET" data-path="/api/logs?search={criteria}" data-description="Gets log entries">
Retrieves logs that match the specified search <code>criteria</code>. This parameter can be combined with all the others in the <code>/api/logs</code> endpoint but is specified separately for clarity.

If no fields are provided a case insensitive 'starts with' search is performed on all of the following fields:
<ul>
  <li><code>client_name</code></li>
  <li><code>connection</code></li>
  <li><code>user_name</code></li>
</ul>

Otherwise, you can specify multiple fields and specify the search using the <code>%field%:%search%</code>, for example: <code>application:node user:"John@contoso.com"</code>.

Values specified without quotes are matched using a case insensitive 'starts with' search. If quotes are used a case insensitve exact search is used. If multiple fields are used, the AND operator is used to join the clauses.

<h5>Available Fields</h5>
<ul>
  <li><code>application</code>: Maps to the <code>client_name</code> field.</li>
  <li><code>connection</code>: Maps to the <code>connection</code> field.</li>
  <li><code>user</code>: Maps to the <code>user_name</code> field.</li>
</ul>

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/logs?search=<textarea id="logs-search-query" style="width:450px;height:20px;">application:node user:"John@contoso.com"</textarea>
Authorization: Bearer <span class='tokenme param'>{token}</span>
</code></pre>

  <% include ./templates/logs-doc %>
</div>


<div class="markdown" data-verb="GET" data-path="/api/logs?from={checkpointId}&take={count}" data-description="Gets log entries from a checkpoint">
Retrieves `count` log entries that were logged after `checkpointId`.
<ul>
  <li>If <code>checkpointId</code> is not provided it will start retrieving from the first log entry.</li>
  <li>If <code>count</code> is not provided the default value is 200 (also the max value).</li>
</ul>

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>api/logs?from=<input type="text" id="logs-checkpoint-from"/>&amp;take=<select id="logs-checkpoint-take-selector"/>
Authorization: Bearer <span class='tokenme param'>{token}</span>
</code></pre>

  <% include ./templates/logs-doc %>
</div>

</div>
